{
    ;; !  | means mandatory -   modifier(s) alone when pressend change behavior
    ;; #  | means optional  -   modifiers are optional (but atleast one necessary)

    ;; :!Ca is keycode :a and prefix a with !C

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift

    ;; ## | optional any
    ;; !! | command + control + optional + shift (hyper)

    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and *fgdffgsdgrtfdgdfsgghsdfgdfgfsdgfsdgsdfgfgdsfgdfggsdfggjoptional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/


    ;; need to prefix C T O S F with ! or #
    ;;
    ;; code for all this:
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68


:profiles {
    :Default {  :default true
                :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                                ;; keys need to be pressed within this threshold to be considered simultaneous
                :delay   500    ;; to_delayed_action_delay_milliseconds (def: 500)
                                ;; basically it means time after which the key press is count delayed
                :alone   500    ;; to_if_alone_timeout_milliseconds (def: 1000)
                                ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
                :held    1000   ;; to_if_held_down_threshold_milliseconds (def: 500)
                                ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
             }
} ;; profiles

:templates {
    :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :km     "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'" ;; don't have KBM {yet}
    :open   "open \"%s\""
    :opena  "open -a \"%s\""
} ;; templates

;; Define different kinds of keyboards
:devices {
    :apple [{:vendor_id 1452, :product_id 832 }] ;; Apple Internal
    :ap2 [{:vendor_id 13, :product_id 0 }] ;; Anne Pro 2 (mechanical)
    :ap2usb [{:vendor_id 1241, :product_id 41619 }] ;; Anne Pro 2 (mechanical)
    :gk61usb [{:vendor_id 7847, :product_id 2311 }] ;; GK61XS (mechanical)
    :gk61 [{:vendor_id 2652, :product_id 17666 }] ;; GK61XS (mechanical)

    :kybs [  ;; Default for all keyboards
        {:vendor_id 1452, :product_id 832}
        {:vendor_id 13, :product_id 0 }
        {:vendor_id 7847, :product_id 2311 }
        {:vendor_id 2652, :product_id 17666 }
    ]

} ;; devices

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
:layers {
    :launch-mode {:key :tab}
} ;; layers

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; or keys like z which are used less often
:simlayers {
} ;; simlayers

:applications {
    :terminals  ["^com\\.apple\\.Terminal$",
                 "^com\\.googlecode\\.iterm2$"] ;; I don't use iTerm so could delete this
}

;; main contains multiple manipulators
:main [

    ;; each manipulator has a description and multiple rules

    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

    ;; TODO-dsc: Add context specific simlayers -> `w` for window-management, `a` for apps `s` for signs & symbols
    ;; You get the idea


    {:des "Anne Pro 2 specific mappings"
        :rules [ :ap2
            [:delete_forward :end]
            [:!Cescape :!Cgrave_accent_and_tilde]
    ]}

    {:des "GK61XS USB specific mappings"
        :rules [ :gk61
            [:delete_forward :end]
            [:!Cescape :!Cgrave_accent_and_tilde]
            ;; [:left_command :left_option]
            ;; [:left_option :left_command]
    ]}

    {:des "Cmd + Escape -> Toggle windows of an application on 10keys"
        :rules [ :kybs
            [:delete_forward :end]
            [:!Cescape :!Cgrave_accent_and_tilde]
    ]}

    {:des "Ctrl Backspace -> Forward Delete"
        :rules [ :kybs
            [:!Wdelete_or_backspace :delete_forward]
            [:!Tdelete_or_backspace :delete_forward]
   ]}

    {:des "Ctrl W -> Delete last word"
        :rules [ :kybs
            [:!Tw :!Tw :terminals]

            [:!Ww :!Odelete_or_backspace !:terminals]
            [:!Tw :!Odelete_or_backspace !:terminals]
            ;; [:!Ww :!TOSdelete_or_backspace !:terminals]
            ;; [:!Tw :!TO1Sdelete_or_backspace !:terminals]
   ]}

    {:des "Ctrl + Shift + K -> Delete until end of line"
        :rules [ :kybs
            [:!TSk :!Tk :terminals]
    ]}

    {:des "Shift -> {} or Shift"
        :rules [
            [:##left_shift :left_shift :kybs {:alone :!Sopen_bracket} ]
            [:##right_shift :right_shift :kybs {:alone :!Sclose_bracket} ]
    ]}

    {:des "Cmd/Ctrl -> () : primary thumb keys"
        :rules [
            [:##left_command :##left_command :kybs {:held :left_command :alone :!S9}]
            [:##right_command :##right_control :kybs {:held :right_control :alone :!S0}]
    ]}

    {:des "Alt -> [] or Meh(Control Shift Option): secondary thumb keys"
         :rules [
            [:##left_option :##left_option :kybs {:alone :open_bracket} ]
            [:##right_option :!TOleft_shift :kybs {:alone :close_bracket} ]
    ]}

    {:des "caps lock -> escape (alone) left_control (held) or ijkl-navigation"
        :rules [
            [:##caps_lock :left_control nil {:alone :escape}]
            [:!Ti   :up_arrow]
            [:!Tj   :left_arrow]
            [:!Tk   :down_arrow]
            [:!Tl   :right_arrow]
            [:!TSi  :!Sup_arrow]
            [:!TSj  :!Sleft_arrow]
            [:!TSk  :!Sdown_arrow]
            [:!TSl  :!Sright_arrow]
            [:!TCi  :!Cup_arrow]
            [:!TCj  :!Cleft_arrow]
            [:!TCk  :!Cdown_arrow]
            [:!TCl  :!Cright_arrow]
            [:!TCSi :!CSup_arrow]
            [:!TCSj :!CSleft_arrow]
            [:!TCSk :!CSdown_arrow]
            [:!TCSl :!CSright_arrow]
            [:!TOi  :!Oup_arrow]
            [:!TOj  :!Oleft_arrow]
            [:!TOk  :!Odown_arrow]
            [:!TOl  :!Oright_arrow]
            [:!TOSi :!OSup_arrow]
            [:!TOSj :!OSleft_arrow]
            [:!TOSk :!OSdown_arrow]
            [:!TOSl :!OSright_arrow]

            [:!Tn       :!Odelete_or_backspace]
            [:!Tm       :delete_or_backspace]
            [:!Tcomma   :delete_forward]
            [:!Tperiod  :!Odelete_forward]
            ; [:!Tslash   :!Cdelete_forward]
            [:!TCn       :!Cdelete_or_backspace]
            [:!TCm       :!Cdelete_or_backspace]

            [:!Treturn_or_enter  :!Creturn_or_enter]
    ]}

    {:des "launch-mode: quick open applications"
        :rules [:launch-mode
               ; [:o [:alfred "launch" "/Applications/Obsidian.app"] ]
               [:b [:opena "Books"] ]
               [:c [:opena "Visual Studio Code"] ]
               [:d [:opena "Dictionary"] ]
               [:e [:opena "Evernote"] ]
               [:f [:opena "Finder"] ]
               [:g [:opena "Google Chrome"] ]
               [:k [:opena "Calendar"] ]
               [:n [:opena "Notion"] ]
               [:m [:opena "Music"] ]
               [:o [:opena "Obsidian"] ]
               [:p [:opena "Preview"] ]
               [:s [:opena "Slack"] ]
               [:t [:opena "Terminal"] ]
               [:x [:opena "Calibre"] ]
               [:z [:opena "Zotero"] ]

               [:j :!QWspacebar ] ;; e(m)oji
            ;;    [:k [:km "trigger macro by name"] ] ;; keyboard maestro
               [:l :!CSv ] ;; c(l)ipboard history
   ]}

] ;; main list

}